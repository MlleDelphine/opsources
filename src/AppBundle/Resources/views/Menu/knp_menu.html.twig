{#{% extends 'knp_menu.html.twig' %}#}
{#{% macro attributes(attributes) %}#}
    {#{% for name, value in attributes %}#}
        {#{%- if value is not none and value is not sameas(false) -%}#}
            {#{{- ' %s="%s"'|format(name, value is sameas(true) ? name|e : value|e)|raw -}}#}
        {#{%- endif -%}#}
    {#{%- endfor -%}#}
{#{% endmacro %}#}

{#{% block compressed_root %}#}
    {#{% spaceless %}#}
        {#{{ block('root') }}#}
    {#{% endspaceless %}#}
{#{% endblock %}#}

{#{% block root %}#}
    {#{% set listAttributes = item.childrenAttributes %}#}
    {#{{ block('list') -}}#}
{#{% endblock %}#}

{#{% block list %}#}
    {#{% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}#}
        {#{% import _self as knp_menu %}#}
        {#<ul{{ knp_menu.attributes(listAttributes) }}>#}
            {#{{ block('children') }}#}
        {#</ul>#}
    {#{% endif %}#}
{#{% endblock %}#}

{#{% block children %}#}
    {#&#123;&#35; save current variables &#35;&#125;#}
    {#{% set currentOptions = options %}#}
    {#{% set currentItem = item %}#}
    {#&#123;&#35; update the depth for children &#35;&#125;#}
    {#{% if options.depth is not none %}#}
        {#{% set options = options|merge({'depth': currentOptions.depth - 1}) %}#}
    {#{% endif %}#}
    {#&#123;&#35; update the matchingDepth for children &#35;&#125;#}
    {#{% if options.matchingDepth is not none and options.matchingDepth > 0 %}#}
        {#{% set options = options|merge({'matchingDepth': currentOptions.matchingDepth - 1}) %}#}
    {#{% endif %}#}
    {#{% for item in currentItem.children %}#}
        {#{{ block('item') }}#}
    {#{% endfor %}#}
    {#&#123;&#35; restore current variables &#35;&#125;#}
    {#{% set item = currentItem %}#}
    {#{% set options = currentOptions %}#}
{#{% endblock %}#}

{#{% block item %}#}
    {#{% if item.displayed %}#}
        {#&#123;&#35; building the class of the item &#35;&#125;#}
        {#{%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}#}
        {#{%- if matcher.isCurrent(item) %}#}
            {#{%- set classes = classes|merge([options.currentClass]) %}#}
        {#{%- elseif matcher.isAncestor(item, options.matchingDepth) %}#}
            {#{%- set classes = classes|merge([options.ancestorClass]) %}#}
        {#{%- endif %}#}
        {#{%- if item.actsLikeFirst %}#}
            {#{%- set classes = classes|merge([options.firstClass]) %}#}
        {#{%- endif %}#}
        {#{%- if item.actsLikeLast %}#}
            {#{%- set classes = classes|merge([options.lastClass]) %}#}
        {#{%- endif %}#}

        {#&#123;&#35; Mark item as "leaf" (no children) or as "branch" (has children that are displayed) &#35;&#125;#}
        {#{% if item.hasChildren and options.depth is not sameas(0) %}#}
            {#{% if options.branch_class is not empty and item.displayChildren %}#}
                {#{%- set classes = classes|merge([options.branch_class]) %}#}
            {#{% endif %}#}
        {#{% elseif options.leaf_class is not empty %}#}
            {#{%- set classes = classes|merge([options.leaf_class]) %}#}
        {#{%- endif %}#}

        {#{%- set attributes = item.attributes %}#}
        {#{%- if classes is not empty %}#}
            {#{%- set attributes = attributes|merge({'class': classes|join(' ')}) %}#}
        {#{%- endif %}#}
        {#&#123;&#35; displaying the item &#35;&#125;#}
        {#{% import _self as knp_menu %}#}
        {#<li{{ knp_menu.attributes(attributes) }}>#}
            {#{%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}#}
                {#{{ block('linkElement') }}#}
            {#{%- else %}#}
                {#{{ block('spanElement') }}#}
            {#{%- endif %}#}
            {#&#123;&#35; render the list of children&#35;&#125;#}
            {#{%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}#}
            {#{%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}#}
            {#{%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}#}
            {#{{ block('list') }}#}
        {#</li>#}
    {#{% endif %}#}
{#{% endblock %}#}

{#{% block linkElement %}{% import _self as knp_menu %}<a href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}>{{ block('label') }}</a>{% endblock %}#}

{#{% block spanElement %}{% import _self as knp_menu %}<span{{ knp_menu.attributes(item.labelAttributes) }}>{{ block('label') }}</span>{% endblock %}#}

{#{% block label %}{% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}{% endblock %}#}

{% extends 'knp_menu.html.twig' %}

{% block item %}
    {% import "knp_menu.html.twig" as macros %}
    {% if item.displayed %}
        {%- set attributes = item.attributes %}
        {%- set is_dropdown = attributes.dropdown|default(false) %}
        {%- set divider_prepend = attributes.divider_prepend|default(false) %}
        {%- set divider_append = attributes.divider_append|default(false) %}

        {# unset bootstrap specific attributes #}
        {%- set attributes = attributes|merge({'dropdown': null, 'divider_prepend': null, 'divider_append': null }) %}

        {%- if divider_prepend %}
            {{ block('dividerElement') }}
        {%- endif %}

        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# building the class of the children #}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

        {# adding classes for dropdown #}
        {%- if is_dropdown %}
            {%- set classes = classes|merge(['dropdown']) %}
            {%- set childrenClasses = childrenClasses|merge(['dropdown-menu']) %}
        {%- endif %}

        {# putting classes together #}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}

        {# displaying the item #}
        <li{{ macros.attributes(attributes) }}>
            {%- if is_dropdown %}
                {{ block('dropdownElement') }}
            {%- elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {{ block('list') }}
        </li>

        {%- if divider_append %}
            {{ block('dividerElement') }}
        {%- endif %}
    {% endif %}
{% endblock %}

{% block dividerElement %}
    {% if item.level == 1 %}
        <li class="divider-vertical"></li>
    {% else %}
        <li class="divider"></li>
    {% endif %}
{% endblock %}

{% block linkElement %}
    <a href="{{ item.uri }}"{{ macros.attributes(item.linkAttributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
    </a>
{% endblock %}

{% block spanElement %}
    <span>{{ macros.attributes(item.labelAttributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
	</span>
{% endblock %}

{% block dropdownElement %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
    {%- set classes = classes|merge(['dropdown-toggle']) %}
    {%- set attributes = item.linkAttributes %}
    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {%- set attributes = attributes|merge({'data-toggle': 'dropdown'}) %}
    {%- set attributes = attributes|merge({'aria-expanded': false }) %}
    {%- set attributes = attributes|merge({'role': 'button' }) %}
    <a href="#"{{ macros.attributes(attributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
        <b class="caret"></b>
    </a>
{% endblock %}

{% block label %}{{ item.label|trans }}{% endblock %}

